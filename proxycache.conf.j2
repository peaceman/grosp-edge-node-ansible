proxy_cache_path /opt/segments levels=2:2 keys_zone=segments:10m inactive=10m min_free=2g;

# force tls redirect
server {
    listen 80;
    listen [::]:80;

    server_name _;

    location / {
        return 302 https://$host$request_uri;
    }
}


# application
server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;

    server_name _;

    ssl_certificate /ssl/cert.crt;
    ssl_certificate_key /ssl/cert.key;

    location ~ /\. {
        deny all;
    }

    location /healthz {
        return 200 "ðŸ§©";
    }

    set $hmac_secret "{{ proxy_cache_hmac_secret | mandatory }}";

    location / {
        access_by_lua_block {
            local uri_args = ngx.req.get_uri_args()

            if ngx.time() > tonumber(uri_args.e) then
                ngx.exit(ngx.HTTP_UNAUTHORIZED)
            end

            local hmac = require "resty.hmac"
            local hmac_sha256 = hmac:new(ngx.var.hmac_secret, hmac.ALGOS.SHA256)

            hmac_sha256:update(ngx.var.uri)
            hmac_sha256:update(uri_args.e)

            local calculated_hmac = ngx.encode_base64(hmac_sha256:final())

            if calculated_hmac ~= uri_args.h then
                ngx.exit(ngx.HTTP_UNAUTHORIZED)
            end
        }

        proxy_cache segments;
        proxy_cache_lock on;
        proxy_cache_valid 15m;
        proxy_ignore_headers Vary Expires Cache-Control;
        proxy_cache_key $scheme$proxy_host$uri;
        proxy_pass {{ proxy_cache_upstream_url }};
    }
}
